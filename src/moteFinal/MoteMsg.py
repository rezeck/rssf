#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'MoteMsg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 28

# The Active Message type associated with this message.
AM_TYPE = 240

class MoteMsg(tinyos.message.Message.Message):
    # Create a new MoteMsg of size 28.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=28):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <MoteMsg> \n"
        try:
            s += "  [version=0x%x]\n" % (self.get_version())
        except:
            pass
        try:
            s += "  [size=0x%x]\n" % (self.get_size())
        except:
            pass
        try:
            s += "  [temperature=0x%x]\n" % (self.get_temperature())
        except:
            pass
        try:
            s += "  [luminosity=0x%x]\n" % (self.get_luminosity())
        except:
            pass
        try:
            s += "  [src=0x%x]\n" % (self.get_src())
        except:
            pass
        try:
            s += "  [parent_node=0x%x]\n" % (self.get_parent_node())
        except:
            pass
        try:
            s += "  [extra_data_2=0x%x]\n" % (self.get_extra_data_2())
        except:
            pass
        try:
            s += "  [extra_data_3=0x%x]\n" % (self.get_extra_data_3())
        except:
            pass
        try:
            s += "  [extra_data_4=0x%x]\n" % (self.get_extra_data_4())
        except:
            pass
        try:
            s += "  [extra_data_5=0x%x]\n" % (self.get_extra_data_5())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: version
    #   Field type: int
    #   Offset (bits): 0
    #   Size (bits): 16
    #

    #
    # Return whether the field 'version' is signed (False).
    #
    def isSigned_version(self):
        return False
    
    #
    # Return whether the field 'version' is an array (False).
    #
    def isArray_version(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'version'
    #
    def offset_version(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'version'
    #
    def offsetBits_version(self):
        return 0
    
    #
    # Return the value (as a int) of the field 'version'
    #
    def get_version(self):
        return self.getUIntElement(self.offsetBits_version(), 16, 1)
    
    #
    # Set the value of the field 'version'
    #
    def set_version(self, value):
        self.setUIntElement(self.offsetBits_version(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'version'
    #
    def size_version(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'version'
    #
    def sizeBits_version(self):
        return 16
    
    #
    # Accessor methods for field: size
    #   Field type: int
    #   Offset (bits): 16
    #   Size (bits): 16
    #

    #
    # Return whether the field 'size' is signed (False).
    #
    def isSigned_size(self):
        return False
    
    #
    # Return whether the field 'size' is an array (False).
    #
    def isArray_size(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'size'
    #
    def offset_size(self):
        return (16 / 8)
    
    #
    # Return the offset (in bits) of the field 'size'
    #
    def offsetBits_size(self):
        return 16
    
    #
    # Return the value (as a int) of the field 'size'
    #
    def get_size(self):
        return self.getUIntElement(self.offsetBits_size(), 16, 1)
    
    #
    # Set the value of the field 'size'
    #
    def set_size(self, value):
        self.setUIntElement(self.offsetBits_size(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'size'
    #
    def size_size(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'size'
    #
    def sizeBits_size(self):
        return 16
    
    #
    # Accessor methods for field: temperature
    #   Field type: int
    #   Offset (bits): 32
    #   Size (bits): 16
    #

    #
    # Return whether the field 'temperature' is signed (False).
    #
    def isSigned_temperature(self):
        return False
    
    #
    # Return whether the field 'temperature' is an array (False).
    #
    def isArray_temperature(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'temperature'
    #
    def offset_temperature(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'temperature'
    #
    def offsetBits_temperature(self):
        return 32
    
    #
    # Return the value (as a int) of the field 'temperature'
    #
    def get_temperature(self):
        return self.getUIntElement(self.offsetBits_temperature(), 16, 1)
    
    #
    # Set the value of the field 'temperature'
    #
    def set_temperature(self, value):
        self.setUIntElement(self.offsetBits_temperature(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'temperature'
    #
    def size_temperature(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'temperature'
    #
    def sizeBits_temperature(self):
        return 16
    
    #
    # Accessor methods for field: luminosity
    #   Field type: int
    #   Offset (bits): 48
    #   Size (bits): 16
    #

    #
    # Return whether the field 'luminosity' is signed (False).
    #
    def isSigned_luminosity(self):
        return False
    
    #
    # Return whether the field 'luminosity' is an array (False).
    #
    def isArray_luminosity(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'luminosity'
    #
    def offset_luminosity(self):
        return (48 / 8)
    
    #
    # Return the offset (in bits) of the field 'luminosity'
    #
    def offsetBits_luminosity(self):
        return 48
    
    #
    # Return the value (as a int) of the field 'luminosity'
    #
    def get_luminosity(self):
        return self.getUIntElement(self.offsetBits_luminosity(), 16, 1)
    
    #
    # Set the value of the field 'luminosity'
    #
    def set_luminosity(self, value):
        self.setUIntElement(self.offsetBits_luminosity(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'luminosity'
    #
    def size_luminosity(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'luminosity'
    #
    def sizeBits_luminosity(self):
        return 16
    
    #
    # Accessor methods for field: src
    #   Field type: int
    #   Offset (bits): 64
    #   Size (bits): 16
    #

    #
    # Return whether the field 'src' is signed (False).
    #
    def isSigned_src(self):
        return False
    
    #
    # Return whether the field 'src' is an array (False).
    #
    def isArray_src(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'src'
    #
    def offset_src(self):
        return (64 / 8)
    
    #
    # Return the offset (in bits) of the field 'src'
    #
    def offsetBits_src(self):
        return 64
    
    #
    # Return the value (as a int) of the field 'src'
    #
    def get_src(self):
        return self.getUIntElement(self.offsetBits_src(), 16, 1)
    
    #
    # Set the value of the field 'src'
    #
    def set_src(self, value):
        self.setUIntElement(self.offsetBits_src(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'src'
    #
    def size_src(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'src'
    #
    def sizeBits_src(self):
        return 16
    
    #
    # Accessor methods for field: parent_node
    #   Field type: int
    #   Offset (bits): 80
    #   Size (bits): 16
    #

    #
    # Return whether the field 'parent_node' is signed (False).
    #
    def isSigned_parent_node(self):
        return False
    
    #
    # Return whether the field 'parent_node' is an array (False).
    #
    def isArray_parent_node(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'parent_node'
    #
    def offset_parent_node(self):
        return (80 / 8)
    
    #
    # Return the offset (in bits) of the field 'parent_node'
    #
    def offsetBits_parent_node(self):
        return 80
    
    #
    # Return the value (as a int) of the field 'parent_node'
    #
    def get_parent_node(self):
        return self.getUIntElement(self.offsetBits_parent_node(), 16, 1)
    
    #
    # Set the value of the field 'parent_node'
    #
    def set_parent_node(self, value):
        self.setUIntElement(self.offsetBits_parent_node(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'parent_node'
    #
    def size_parent_node(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'parent_node'
    #
    def sizeBits_parent_node(self):
        return 16
    
    #
    # Accessor methods for field: extra_data_2
    #   Field type: long
    #   Offset (bits): 96
    #   Size (bits): 32
    #

    #
    # Return whether the field 'extra_data_2' is signed (False).
    #
    def isSigned_extra_data_2(self):
        return False
    
    #
    # Return whether the field 'extra_data_2' is an array (False).
    #
    def isArray_extra_data_2(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'extra_data_2'
    #
    def offset_extra_data_2(self):
        return (96 / 8)
    
    #
    # Return the offset (in bits) of the field 'extra_data_2'
    #
    def offsetBits_extra_data_2(self):
        return 96
    
    #
    # Return the value (as a long) of the field 'extra_data_2'
    #
    def get_extra_data_2(self):
        return self.getUIntElement(self.offsetBits_extra_data_2(), 32, 1)
    
    #
    # Set the value of the field 'extra_data_2'
    #
    def set_extra_data_2(self, value):
        self.setUIntElement(self.offsetBits_extra_data_2(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'extra_data_2'
    #
    def size_extra_data_2(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'extra_data_2'
    #
    def sizeBits_extra_data_2(self):
        return 32
    
    #
    # Accessor methods for field: extra_data_3
    #   Field type: long
    #   Offset (bits): 128
    #   Size (bits): 32
    #

    #
    # Return whether the field 'extra_data_3' is signed (False).
    #
    def isSigned_extra_data_3(self):
        return False
    
    #
    # Return whether the field 'extra_data_3' is an array (False).
    #
    def isArray_extra_data_3(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'extra_data_3'
    #
    def offset_extra_data_3(self):
        return (128 / 8)
    
    #
    # Return the offset (in bits) of the field 'extra_data_3'
    #
    def offsetBits_extra_data_3(self):
        return 128
    
    #
    # Return the value (as a long) of the field 'extra_data_3'
    #
    def get_extra_data_3(self):
        return self.getUIntElement(self.offsetBits_extra_data_3(), 32, 1)
    
    #
    # Set the value of the field 'extra_data_3'
    #
    def set_extra_data_3(self, value):
        self.setUIntElement(self.offsetBits_extra_data_3(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'extra_data_3'
    #
    def size_extra_data_3(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'extra_data_3'
    #
    def sizeBits_extra_data_3(self):
        return 32
    
    #
    # Accessor methods for field: extra_data_4
    #   Field type: long
    #   Offset (bits): 160
    #   Size (bits): 32
    #

    #
    # Return whether the field 'extra_data_4' is signed (False).
    #
    def isSigned_extra_data_4(self):
        return False
    
    #
    # Return whether the field 'extra_data_4' is an array (False).
    #
    def isArray_extra_data_4(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'extra_data_4'
    #
    def offset_extra_data_4(self):
        return (160 / 8)
    
    #
    # Return the offset (in bits) of the field 'extra_data_4'
    #
    def offsetBits_extra_data_4(self):
        return 160
    
    #
    # Return the value (as a long) of the field 'extra_data_4'
    #
    def get_extra_data_4(self):
        return self.getUIntElement(self.offsetBits_extra_data_4(), 32, 1)
    
    #
    # Set the value of the field 'extra_data_4'
    #
    def set_extra_data_4(self, value):
        self.setUIntElement(self.offsetBits_extra_data_4(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'extra_data_4'
    #
    def size_extra_data_4(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'extra_data_4'
    #
    def sizeBits_extra_data_4(self):
        return 32
    
    #
    # Accessor methods for field: extra_data_5
    #   Field type: long
    #   Offset (bits): 192
    #   Size (bits): 32
    #

    #
    # Return whether the field 'extra_data_5' is signed (False).
    #
    def isSigned_extra_data_5(self):
        return False
    
    #
    # Return whether the field 'extra_data_5' is an array (False).
    #
    def isArray_extra_data_5(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'extra_data_5'
    #
    def offset_extra_data_5(self):
        return (192 / 8)
    
    #
    # Return the offset (in bits) of the field 'extra_data_5'
    #
    def offsetBits_extra_data_5(self):
        return 192
    
    #
    # Return the value (as a long) of the field 'extra_data_5'
    #
    def get_extra_data_5(self):
        return self.getUIntElement(self.offsetBits_extra_data_5(), 32, 1)
    
    #
    # Set the value of the field 'extra_data_5'
    #
    def set_extra_data_5(self, value):
        self.setUIntElement(self.offsetBits_extra_data_5(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'extra_data_5'
    #
    def size_extra_data_5(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'extra_data_5'
    #
    def sizeBits_extra_data_5(self):
        return 32
    
